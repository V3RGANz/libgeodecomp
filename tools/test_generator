#!/usr/bin/python
import os
import sys
from subprocess import call

# The purpose of this script is to bundle the generation of the
# scaffolding code for unit tests into one command invocation as CMake
# on Windows struggles with more than one such task per directory
# (i.e. it will only execute one command created via
# add_custom_command(), causing all other test sources in that
# directory not to be created).

arg_index = 1
python = "python"

if sys.argv[1] == "--python":
    python = sys.argv[2]
    arg_index += 2

cxxtestgen = sys.argv[arg_index]
arg_index += 1

testguard = sys.argv[arg_index]
testguard_file = open(testguard, "r")
testguard_str = testguard_file.read()
testguard_file.close()
arg_index += 1

for source in sys.argv[arg_index:-1]:
    header = source.replace(".cpp", ".h").replace(".cu", ".h")
    temp = source + ".tmp"
    #
    call([python, cxxtestgen, "-o", temp, "--part", header])
    temp_file = open(temp, "r")
    temp_str = temp_file.read()
    test_str = testguard_str + temp_str
    #
    source_file = open(source, "w")
    source_file.write(test_str)
    source_file.close()
    #
    # explicitly close here to avoid problems on Windows when deleting
    # a possibly still open file.
    temp_file.close()
    os.remove(temp)

run_tests_source = sys.argv[-1]
temp = run_tests_source + ".tmp"

call([python, cxxtestgen, "-o", temp, "--root", "--main", "run_tests", "--error-printer"])
temp_file = open(temp, "r")
temp_str = temp_file.read()
test_str = testguard_str + temp_str

source_file = open(run_tests_source, "w")
source_file.write(test_str)
source_file.close()

# explicitly close here to avoid problems on Windows when deleting
# a possibly still open file.
temp_file.close()
os.remove(temp)
